{"version":3,"file":"static/js/420.c9657486.chunk.js","mappings":"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","sources":["widgets/SignUpForm.jsx","pages/SignUp.jsx"],"sourcesContent":["import { Fragment, useCallback, useEffect } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { toast } from \"react-toastify\";\r\nimport classNames from \"classnames\";\r\n\r\nimport PasswordInput from \"@components/PasswordInput\";\r\nimport Spring from \"@components/Spring\";\r\n\r\nimport { signInWithGoogle, registerWithEmail, onAuthStateChanged } from \"../firebase/auth\";\r\nimport GoogleIcon from \"../../src/assets/icons/google.svg\";\r\nimport { login, profile } from \"../features/users/userSlice\";\r\nimport { useCreateUserProfileMutation } from \"@api/UserProfle/userProfileApi\";\r\n\r\nconst SignUpForm = ({ standalone = true }) => {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors, isValid },\r\n    control,\r\n    watch,\r\n  } = useForm({\r\n    mode: \"onChange\",\r\n    defaultValues: {\r\n      displayName: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      passwordConfirm: \"\",\r\n    },\r\n  });\r\n\r\n  const [createUserProfile] = useCreateUserProfileMutation();\r\n\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n\r\n  const Wrapper = standalone ? Fragment : Spring;\r\n  const wrapperProps = standalone ? {} : { className: \"card card-padded\" };\r\n\r\n  const handleCreate = useCallback(async (newProfileData) => {\r\n    try {\r\n      const createdProfile = await createUserProfile(newProfileData).unwrap();\r\n      return createdProfile.data;\r\n    } catch (error) {\r\n      console.error(\"Failed to create profile:\", error);\r\n    }\r\n  }, [createUserProfile]);\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = onAuthStateChanged(async (user) => {\r\n      if (user) {\r\n        try {\r\n          const createdProfile = await handleCreate({\r\n            User_ID: user.uid,\r\n            Email: user.email,\r\n            Name: user.displayName,\r\n          });\r\n\r\n          dispatch(login(user));\r\n          dispatch(profile(createdProfile));\r\n          navigate(\"/dashboard\");\r\n        } catch (error) {\r\n          console.error(\"Failed to create profile:\", error);\r\n        }\r\n      }\r\n    });\r\n\r\n    return () => unsubscribe();\r\n  }, [dispatch, handleCreate, navigate]);\r\n\r\n  const onSubmit = async (data) => {\r\n    try {\r\n      const userCredential = await registerWithEmail(\r\n        data.email,\r\n        data.password,\r\n        data.displayName\r\n      );\r\n      const user = userCredential.user;\r\n\r\n      const createdProfile = await handleCreate({\r\n        User_ID: user.uid,\r\n        Email: user.email,\r\n        Name: user.displayName,\r\n      });\r\n\r\n      dispatch(login(user));\r\n      dispatch(profile(createdProfile));\r\n\r\n      toast.success(\r\n        `Account created! Please check your email ${data.email} to confirm your account.`\r\n      );\r\n      navigate(\"/dashboard\");\r\n    } catch (error) {\r\n      toast.error(`Error creating account: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  const handleGoogleSignIn = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const userCredential = await signInWithGoogle();\r\n      const user = userCredential.user;\r\n\r\n      const createdProfile = await handleCreate({\r\n        User_ID: user.uid,\r\n        Email: user.email,\r\n        Name: user.displayName,\r\n      });\r\n\r\n      dispatch(login(user));\r\n      dispatch(profile(createdProfile));\r\n\r\n      toast.success(\"Signed in with Google successfully!\");\r\n      navigate(\"/dashboard\");\r\n    } catch (error) {\r\n      toast.error(`Failed to sign in with Google: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Wrapper {...wrapperProps}>\r\n      <div className=\"flex flex-col gap-1\">\r\n        <h3>Create new account</h3>\r\n        <p className=\"text-12\">\r\n          Fill out the form below to create a new account\r\n        </p>\r\n      </div>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <div\r\n          className=\"flex flex-col gap-5\"\r\n          style={{ margin: \"20px 0 30px\" }}\r\n        >\r\n          <input\r\n            className={classNames(\"field\", {\r\n              \"field--error\": errors.displayName,\r\n            })}\r\n            type=\"text\"\r\n            placeholder=\"Display Name\"\r\n            {...register(\"displayName\", { required: \"Display Name is required\" })}\r\n          />\r\n          {errors.displayName && <p className=\"error\">{errors.displayName.message}</p>}\r\n\r\n          <input\r\n            className={classNames(\"field\", { \"field--error\": errors.email })}\r\n            type=\"text\"\r\n            placeholder=\"E-mail\"\r\n            {...register(\"email\", {\r\n              required: \"Email is required\",\r\n              pattern: {\r\n                value: /^\\S+@\\S+$/i,\r\n                message: \"Invalid email address\",\r\n              },\r\n            })}\r\n          />\r\n          {errors.email && <p className=\"error\">{errors.email.message}</p>}\r\n\r\n          <Controller\r\n            control={control}\r\n            name=\"password\"\r\n            rules={{ required: \"Password is required\" }}\r\n            render={({\r\n              field: { ref, onChange, value },\r\n              fieldState: { error },\r\n            }) => (\r\n              <PasswordInput\r\n                className={classNames(\"field\", { \"field--error\": error })}\r\n                value={value}\r\n                onChange={(e) => onChange(e.target.value)}\r\n                placeholder=\"Password\"\r\n                innerRef={ref}\r\n              />\r\n            )}\r\n          />\r\n          {errors.password && <p className=\"error\">{errors.password.message}</p>}\r\n\r\n          <Controller\r\n            control={control}\r\n            name=\"passwordConfirm\"\r\n            rules={{\r\n              required: \"Password confirmation is required\",\r\n              validate: (value) => value === watch(\"password\") || \"Passwords do not match\",\r\n            }}\r\n            render={({\r\n              field: { ref, onChange, value },\r\n              fieldState: { error },\r\n            }) => (\r\n              <PasswordInput\r\n                className={classNames(\"field\", { \"field--error\": error })}\r\n                value={value}\r\n                onChange={(e) => onChange(e.target.value)}\r\n                placeholder=\"Confirm password\"\r\n                innerRef={ref}\r\n              />\r\n            )}\r\n          />\r\n          {errors.passwordConfirm && <p className=\"error\">{errors.passwordConfirm.message}</p>}\r\n        </div>\r\n\r\n        <div className=\"flex justify-between items-center gap-4\">\r\n          <button type=\"submit\" className=\"btn flex-1\" disabled={!isValid}>\r\n            Create account\r\n          </button>\r\n          <button\r\n            onClick={handleGoogleSignIn}\r\n            className=\"btn btn--google flex-1\"\r\n          >\r\n            <img src={GoogleIcon} alt=\"Google Icon\" style={{ width: \"20px\" }} />\r\n            Sign up with Google\r\n          </button>\r\n        </div>\r\n      </form>\r\n\r\n      <div style={{ marginTop: \"20px\" }}>\r\n        <p className=\"text-12\">\r\n          Already have an account? <Link to=\"/login\">Sign in</Link>\r\n        </p>\r\n      </div>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default SignUpForm;\r\n","// components\r\nimport AuthLayout from '@components/AuthLayout';\r\nimport SignUpForm from '@widgets/SignUpForm';\r\n\r\nconst SignUp = () => {\r\n    return (\r\n        <AuthLayout title=\"Sign Up\">\r\n            <SignUpForm />\r\n        </AuthLayout>\r\n    );\r\n}\r\n\r\nexport default SignUp"],"names":["_ref","standalone","register","handleSubmit","formState","errors","isValid","control","watch","useForm","mode","defaultValues","displayName","email","password","passwordConfirm","createUserProfile","useCreateUserProfileMutation","navigate","useNavigate","dispatch","useDispatch","Wrapper","Fragment","Spring","wrapperProps","className","handleCreate","useCallback","async","newProfileData","unwrap","data","error","console","useEffect","unsubscribe","onAuthStateChanged","user","createdProfile","User_ID","uid","Email","Name","login","profile","_jsxs","children","_jsx","onSubmit","registerWithEmail","toast","success","message","style","margin","classNames","type","placeholder","required","pattern","value","Controller","name","rules","render","_ref2","field","ref","onChange","fieldState","PasswordInput","e","target","innerRef","validate","_ref3","disabled","onClick","preventDefault","signInWithGoogle","src","GoogleIcon","alt","width","marginTop","Link","to","SignUp","AuthLayout","title","SignUpForm"],"sourceRoot":""}